apiVersion: v1
kind: Template
metadata:
  name: wildfly-mysql
message: Deploying WildFly and MySQL all together.
objects:
### Application Layer: WildFly
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-app
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: wildfly-mysql
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: docker.io/maltron/wildfly-mysql:latest
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-app
  spec:
    failedBuildsHistoryLimit: 5
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-app:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: wildfly-mysql:latest
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-app
  spec:
    replicas: 1
    selector:
      component: application-server
      application: ${APPLICATION_NAME}
      deploymentConfig: ${APPLICATION_NAME}-app
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          component: application-server
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-app
        name: ${APPLICATION_NAME}-app
      spec:
        containers:
        - env:
          - name: DB_SERVICE_HOSTNAME
            value: ${APPLICATION_NAME}-data
          - name: DB_SERVICE_PORT
            value: "3306"
          - name: DB_USERNAME
            value: ${DB_USERNAME}
          - name: DB_PASSWORD
            value: ${DB_PASSWORD}
          - name: DB_DATABASE
            value: ${DB_DATABASE}
          - name: BROKER_ADDRESS
            value: tcp://${BROKER_ADDRESS}:61616?jms.rmIdFromConnectionId=true
          - name: BROKER_USERNAME
            value: ${BROKER_USERNAME}
          - name: BROKER_PASSWORD
            value: ${BROKER_PASSWORD}
          - name: BROKER_TOPICS
            value: ${BROKER_TOPICS}
          - name: BROKER_QUEUES
            value: ${BROKER_QUEUES}
          image: docker.io/maltron/wildfly-mysql:latest
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}-app
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-app
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-app:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${APPLICATION_NAME}-data","namespace":"","kind":"Service"}]'
      description: The web server's http port.
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-app
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      component: application-server
      application: ${APPLICATION_NAME}
      deploymentConfig: ${APPLICATION_NAME}-app
- apiVersion: v1
  id: ${APPLICATION_NAME}-app
  kind: Route
  metadata:
    annotations:
      description: Route for application's http service.
    labels:
      component: application-server
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-app
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APPLICATION_NAME}-app
### Persistent Layer: MySQL

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name:  ${APPLICATION_NAME}-data
  stringData:
    database-password: ${MYSQL_PASSWORD}
    database-root-password: ${MYSQL_ROOT_PASSWORD}
    database-user: ${MYSQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
    creationTimestamp: null
    name:  ${APPLICATION_NAME}-data
  spec:
    ports:
    - name: mysql
      nodePort: 0
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name:  ${APPLICATION_NAME}-data
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name:  ${APPLICATION_NAME}-data
  spec:
    replicas: 1
    selector:
      name:  ${APPLICATION_NAME}-data
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${APPLICATION_NAME}-data
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MYSQL_USER
            value: ${DB_USERNAME}
          - name: MYSQL_PASSWORD
            value: ${DB_PASSWORD}
          - name: MYSQL_ROOT_PASSWORD
            value: ${DB_ROOT_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${DB_DATABASE}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:${MYSQL_VERSION}
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
parameters:
- description: Application's name
  name: APPLICATION_NAME
  required: true
  value: microservice
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DB_USERNAME
  required: true
- description: Password for the MySQL connection user.
  displayName: MySQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DB_PASSWORD
  required: true
- description: Password for the MySQL root user.
  displayName: MySQL root user Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DB_ROOT_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: DB_DATABASE
  required: true
  value: sampledb
- description: Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).
  displayName: Version of MySQL Image
  name: MYSQL_VERSION
  required: true
  value: "5.7"
- name: BROKER_ADDRESS
  required: true
  value: broker-amq-tcp:61616
- name: BROKER_USERNAME
  required: true
  value: mauricio
- name: BROKER_PASSWORD
  required: true
  value: maltron
- name: BROKER_TOPICS
  description: Topic names, separated by commas. These topics will be automatically
    created when the broker starts.
  value: exampleTopic
- name: BROKER_QUEUES
  description: Queues names, separated by commas. These topics will be automatically
    created when the broker starts.
  value: exampleQueue
- description: GitHub trigger secret
  displayName: Github Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: Generic build trigger secret
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
